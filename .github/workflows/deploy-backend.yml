name: Build & Deploy Backend

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies and build
        run: |
          cd server
          npm ci
          npm run build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/treatme-server:latest ./server
          docker push ${{ secrets.DOCKER_USERNAME }}/treatme-server:latest

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to GCP VM via SSH
        run: |
          # Copy updated docker-compose.yml to VM
          gcloud compute scp docker-compose.yml treatme-vm:~/ --zone=asia-south1-a --quiet

          # SSH into VM and deploy using compose commands
          gcloud compute ssh treatme-vm --zone=asia-south1-a --quiet --command="
            # Navigate to the directory with docker-compose.yml
            cd /home/\$(whoami)
            
            # Stop containers
            docker-compose down
            
            # Pull latest images (this will pull the updated image from Docker Hub)
            docker-compose pull
            
            # Start containers with the latest images
            docker-compose up -d
            
            # Clean up old images and containers after successful deployment
            docker system prune -f
            
            # Verify deployment
            docker-compose ps
          "

      - name: Verify Deployment
        run: |
          # Wait a moment for services to start
          sleep 30

          # Test the health endpoint
          curl -f https://api.treatme.site/health || exit 1

          echo "Deployment successful!"
