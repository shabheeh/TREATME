name: Build & Deploy Backend

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/treatme-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
        continue-on-error: false

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Test Google Cloud connectivity
        run: |
          gcloud config list
          gcloud auth list

      - name: Deploy to GCP VM via SSH
        run: |
          # Copy docker-compose.yml to VM
          gcloud compute scp docker-compose.yml treatme-vm:~/docker-compose.yml --zone=asia-south1-a --quiet

          # SSH into VM and deploy
          gcloud compute ssh treatme-vm --zone=asia-south1-a --quiet --command="
            # Navigate to home directory
            cd \$HOME
            
            # Debug: Show current location and verify files exist
            echo 'Current directory:' && pwd
            ls -la docker-compose.yml || echo 'docker-compose.yml not found'
            ls -la server/.env || echo 'server/.env not found'
            
            # Stop current containers
            docker-compose down || echo 'No containers to stop'
            
            # Pull latest images using compose
            docker-compose pull
            
            # Start containers with latest images
            docker-compose up -d
            
            # Clean up old images after successful deployment
            docker system prune -f
            
            # Verify deployment
            docker-compose ps
            echo 'Deployment completed successfully'
          "

      - name: Verify Deployment
        run: |
          # Wait for services to start
          sleep 30

          # Test the health endpoint
          curl -f https://api.treatme.site/health || exit 1

          echo "Deployment successful! âœ…"
